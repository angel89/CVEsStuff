import requests
import csv
import json
import sys
from getopt import getopt


## README FIRST!!!!!!!
#The public rate limit of requests to the NIST API is 5 requests in a rolling 30 second window. That means you need to have a sleep time of 6 secs between requests.
#In the case you have an API key (easy to get one from NIST https://nvd.nist.gov/developers/request-an-api-key), you are allowed to make 50 requests in a rolling 30 second windows
#KNOWN ISSUES WITH SCRIPT : Dont know how to request cves for CPEs wiht a + in the name e.g Notepad++. Dont know how to encocde it properly in the url. if i use urllib.parse it does not work.

apikey={'apiKey':'2980ad6e-d247-4fe6-985f-2bc85dca8300'}

#Creates a file with a list of CPEs from a file with a list of sw names and versions.
def create_CPE_file(fCPES):
	CPES=fCPES.readlines()	
	res=list()
	
	#Checks if the SW list is empty, calls searchCPE.
	for entry in CPES:
		aCPE=''
		aCPE=searchCPE(entry)
		if (aCPE!=''):
			print("Adding CPE: " + aCPE)
			res.append(aCPE)
		
	#Creates file with list of CPEs
	f = open('created_CPE_File.txt','w')
	for line in res:
		f.write(line + '\n')

	print()
	print("created_CPE_File.txt created")

	return (res)
	
#searches for the CPE for each entry in the SW file. Returns a string with the CPE name. HTTP get requests are sent to the NIST API.
def searchCPE(CPE):
	
	CPES1=''
	print("")
	print ("Searching CPEs matching: " + CPE.replace('\n', '')) 
	print ('Trying: https://services.nvd.nist.gov/rest/json/cpes/2.0?keywordSearch=' + CPE.replace('\n', ''))
	
	#sends HTTP get request to nist API, uses api key in the header
	rply = requests.get('https://services.nvd.nist.gov/rest/json/cpes/2.0?keywordSearch=' + CPE.replace('\n', ''), headers=apikey)
	
	if rply.status_code == 200:
	
		#Converts response to json, treated as a dictionary
		rply = json.loads(rply.text)
		i=0
		print("")

		#Checks response, if 'products' field is > than 1 it means there are multiple possible matches to the SW name and version, script makes you choose one.
		if len(rply['products']) > 1:
			print("Choose the correct CPE and version:")
			for CPE in rply['products']:
				print (str(i) + ") " + CPE['cpe']['cpeName'])
				i=i+1
			CPES1 = rply['products'][int(input ('Enter the number to select CPE: '))]['cpe']['cpeName']
		elif len(rply['products']) == 1 :
			CPES1 = rply['products'][0]['cpe']['cpeName']
		else:
			print('Did not find any cpe for '+CPE.replace('\n', '')+' check for spelling, or use --help to see expected format of CPE')
	else:
		print ("Recieved non '200' status code from NIST API: " + str(rply.status_code))
		MY_exit
	return(CPES1)

#Downloads all CVEs affecting selected CPE and writes them to a CSV file 'DownloadedCVES'.
def DownloadCVE(CPES):

	#Writes csv header row
	f = csv.writer(open("DownloadedCVES.csv", "w"))
	f.writerow(["Software", "ID", "Published", "Last Modified", "Description", "Base Score", "Base Severity", "Vector String"])
	
	for entry in CPES:
		skip = False  #Used to skip writing CVEs when reply is empty. 
		print("")
		print ("Fetching CVEs for " + entry) 
		print ('Trying: https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=' + entry)
		
		rply = ""
		replys = []
		try:
			#Sends Get request to nist API, with api key in header.
			rply = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=' + entry, headers=apikey)
			replys.append(json.loads(rply.text))
			
			#checks if the request returned any results.
			if replys[0]['resultsPerPage'] == 0:
				raise Exception("1") 
			elif rply.status_code != 200:
				raise Exception("2") 
			else:
				print('Success')

			#checks if there are more than 2000 results wich is the default maximum requests returned per query, if totalresults > 2000 then multiple HTTP requests need to be sent 
			#changing the startindex by 2000.
			if int(replys[0]['totalResults']) > 2000 :
				pages=int(replys[0]['totalResults'])//2000
				print ('\nMore than 2000 results found, will perform multple requests to NIST API')

				for i in range (1,pages+1):
					print ('Trying: https://services.nvd.nist.gov/rest/json/cves/2.0?startIndex='+str((pages*2000)-1)+'&cpeName=' + entry)
					aRply= requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?startIndex='+str((pages*2000)-1)+'&cpeName=' + entry, headers=apikey)
					replys.append(json.loads(aRply.text))
					print('Success')
					
		#Exception to catch when the CPE used does not exist, or other errors (normally connection issues)
		except Exception as e:
			skip =True #Sets skip to TRUE when no results are returned from NIST, skips writting CVEs to file.
			if e.args[0]== '1':
				print('Sorry, the selected CPE does not exist or the CPE has no CVEs') 
			elif e.args[0]== '2':
				print ("\nRecieved non '200' status code from NIST API: " + str(rply.status_code))
			else:
				print ('\Other errors')	
		
		#Writes CVEs to CSV file, row by row. The values taken from the json reply are hardcoded (id, published, lastmodified...). Note that the json dictionary has also lists, hence the random [0] when dealing with the dictionary, also the first column in the row is taking the name from the CPE entry
		if not skip:
			for aRply in replys:
				for cve in aRply['vulnerabilities']:
					if 'cvssMetricV31' in cve['cve']['metrics']:
						f.writerow([entry.split(':')[3]+':'+entry.split(':')[4]+':'+entry.split(':')[5]+':'+entry.split(':')[6], cve['cve']['id'], cve['cve']['published'], cve['cve']['lastModified'], cve['cve']['descriptions'][0]['value'], cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['baseScore'], cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['baseSeverity'], cve['cve']['metrics']['cvssMetricV31'][0]['cvssData']['vectorString']])
					elif 'cvssMetricV2' in cve['cve']['metrics']:
						f.writerow([entry.split(':')[3]+':'+entry.split(':')[4]+':'+entry.split(':')[5]+':'+entry.split(':')[6], cve['cve']['id'], cve['cve']['published'], cve['cve']['lastModified'], cve['cve']['descriptions'][0]['value'], cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['baseScore'], cve['cve']['metrics']['cvssMetricV2'][0]['baseSeverity'], cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['vectorString']])
					else:
						print ('ERRORRRRRRRRr parsing or writing JSON/CSV, should not get here')
						MY_exit()
	print('')
	print ('Created DownloadedCVES.csv')


def help():
	print('''Available options are "--CPE_file=","--CPE=", "--create_CPEf=" or "--help":
--CPE_file= Excpects a filename, file must contain a list of CPEs, can be constructed manually or by using option "create_CPEf" from this script. Will download CVEs for all CPEs.
--CPE= Expects a CPE string of the product you want to download the CVEs for.
--create_CPE= Requires a filename, file must contain a list of product names with format: <product_name> <version1> <version2>. One product per line, <version2> is optional.
	    It then creates a txt file with a list of CPEs to be used as input for option CPE_file from this script.
--find_CPE= Finds the CPE name of a product and version, format: "<product_name> <version1> <version2>". <version2> is optional.
--help or -h (or anything you want): prints out this help.

Examples:
python3 NIST_CVE-CPE.py --find_CPE="linux 4.3 rc1"
python3 NIST_CVE-CPE.py --create_CPE=CPE_FILE.txt\n''') 

#My exit() function incase i want to do something on closing.
def MY_exit():
	exit()

########################################################################################### ------- MAIN ------- ###########################################################################################
opts=list()
args=list()

print("")

try:
	opts, args = getopt(sys.argv[1:],'m:f:',['CPE_file=','CPE=','create_CPEf=', 'find_CPE='])
	if len(opts) > 1 or len(opts) < 1:
		print('Script only works with 1 argument')
		raise Exception()
except:
	help()
	MY_exit()
	
CPES=list()
if '--create_CPEf' in opts[0]:
	print("Will create file created_CPE_File.txt with list of CPEs from " + opts[0][1])
	res = create_CPE_file(open(opts[0][1],'r'))
	if (input ('Want to download CVEs for the found CPEs? Y/N: ').upper() == 'Y'):
		DownloadCVE(res)
elif '--CPE' in opts[0]:
	CPES.append(opts[0][1])
	print ('Donwloading CVEs for CPE: ' + CPES[0])
	DownloadCVE(CPES)
elif '--CPE_file' in opts[0]:
	print ('Loading CPE file')
	fileCPE=open(opts[0][1],'r')
	CPES= fileCPE.read().splitlines()
	print ('Will download CVEs for the following CPES: ' + str(CPES))
	DownloadCVE(CPES)
elif '--find_CPE' in opts[0]:
	print ('Find the CPE of prudct: ' + opts[0][1])
	res =list()
	res.append(searchCPE(opts[0][1]))
	print('\nChosen CPE =\n' + res[0])
	if (input ('\nWant to download CVEs for this CPE? Y/N: ').upper() == 'Y'):
		DownloadCVE(res)
else:
	print ("Something went wrong :(")
MY_exit()
	
